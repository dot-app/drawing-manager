var BMapGLLib=window.BMapGLLib=BMapGLLib||{};(function(){function t(t,n,a){return null!=n&&(t=Math.max(t,n)),null!=a&&(t=Math.min(t,a)),t}function n(t,n,a){for(;t>a;)t-=a-n;for(;t<n;)t+=a-n;return t}var a=6370996.81,l=BMapGLLib.GeoUtils=function(){};l.isPointInRect=function(t,n){if("Point"!==t.toString()&&"LatLng"!==t.toString()||!(n instanceof BMapGL.Bounds))return!1;var a=n.getSouthWest(),l=n.getNorthEast();return t.lng>=a.lng&&t.lng<=l.lng&&t.lat>=a.lat&&t.lat<=l.lat},l.isPointInCircle=function(t,n){if("Point"!==t.toString()&&"LatLng"!==t.toString()||!(n instanceof BMapGL.Circle))return!1;var a=n.getCenter(),r=n.getRadius(),e=l.getDistance(t,a);return e<=r},l.isPointOnPolyline=function(t,n){if("Point"!==t.toString()&&"LatLng"!==t.toString()||!(n instanceof BMapGL.Polyline))return!1;var a=n.getBounds();if(!this.isPointInRect(t,a))return!1;for(var l=n.getPath(),r=0;r<l.length-1;r++){var e=l[r],i=l[r+1];if(t.lng>=Math.min(e.lng,i.lng)&&t.lng<=Math.max(e.lng,i.lng)&&t.lat>=Math.min(e.lat,i.lat)&&t.lat<=Math.max(e.lat,i.lat)){var o=(e.lng-t.lng)*(i.lat-t.lat)-(i.lng-t.lng)*(e.lat-t.lat);if(o<2e-9&&o>-2e-9)return!0}}return!1},l.isPointInPolygon=function(t,n){if("Point"!==t.toString()&&"LatLng"!==t.toString()||!(n instanceof BMapGL.Polygon))return!1;var a=n.getBounds();if(!this.isPointInRect(t,a))return!1;var l,r,e=n.getPath(),i=e.length,o=!0,g=0,h=2e-10,M=t;l=e[0];for(var f=1;f<=i;++f){if(M.equals(l))return o;if(r=e[f%i],M.lat<Math.min(l.lat,r.lat)||M.lat>Math.max(l.lat,r.lat))l=r;else{if(M.lat>Math.min(l.lat,r.lat)&&M.lat<Math.max(l.lat,r.lat)){if(M.lng<=Math.max(l.lng,r.lng)){if(l.lat==r.lat&&M.lng>=Math.min(l.lng,r.lng))return o;if(l.lng==r.lng){if(l.lng==M.lng)return o;++g}else{var s=(M.lat-l.lat)*(r.lng-l.lng)/(r.lat-l.lat)+l.lng;if(Math.abs(M.lng-s)<h)return o;M.lng<s&&++g}}}else if(M.lat==r.lat&&M.lng<=r.lng){var u=e[(f+1)%i];M.lat>=Math.min(l.lat,u.lat)&&M.lat<=Math.max(l.lat,u.lat)?++g:g+=2}l=r}}return g%2!=0},l.degreeToRad=function(t){return Math.PI*t/180},l.radToDegree=function(t){return 180*t/Math.PI},l.getDistance=function(r,e){return"Point"!==r.toString()&&"LatLng"!==r.toString()&&"Point"!==e.toString()&&"LatLng"!==e.toString()?0:(r.lng=n(r.lng,-180,180),r.lat=t(r.lat,-74,74),e.lng=n(e.lng,-180,180),e.lat=t(e.lat,-74,74),i=l.degreeToRad(r.lng),g=l.degreeToRad(r.lat),o=l.degreeToRad(e.lng),h=l.degreeToRad(e.lat),a*Math.acos(Math.sin(g)*Math.sin(h)+Math.cos(g)*Math.cos(h)*Math.cos(o-i)));var i,o,g,h},l.getPolylineDistance=function(t){if(t instanceof BMapGL.Polyline||t instanceof Array){var n;if(n=t instanceof BMapGL.Polyline?t.getPath():t,n.length<2)return 0;for(var a=0,r=0;r<n.length-1;r++){var e=n[r],i=n[r+1],o=l.getDistance(e,i);a+=o}return a}return 0},l.getTurfPolygonArea=function(t){if(!(t instanceof BMapGL.Polygon||t instanceof Array))return 0;var n;if(n=t instanceof BMapGL.Polygon?t.getPath():t,n.length<3)return 0;let a=n.map(function(t){return[t.lng,t.lat]});return turf.area(turf.polygon([a]))},l.getPolygonArea=function(t){if(!(t instanceof BMapGL.Polygon||t instanceof Array))return 0;var n;if(n=t instanceof BMapGL.Polygon?t.getPath():t,n[0].equals(n[n.length-1])&&n.pop(),n.length<3)return 0;for(var l,r,e=0,i=0,o=0,g=0,h=0,M=0,f=0,s=0,u=0,P=0,c=0,I=0,L=0,v=0,m=0,p=0,y=0,B=0,G=0,d=0,S=0,x=0,R=0,T=0,A=0,b=0,D=0,q=0,C=0,w=0,E=0,N=0,O=0,U=0,W=a,j=n.length,k=0;k<j;k++)0==k?(i=n[j-1].lng*Math.PI/180,o=n[j-1].lat*Math.PI/180,g=n[0].lng*Math.PI/180,h=n[0].lat*Math.PI/180,M=n[1].lng*Math.PI/180,f=n[1].lat*Math.PI/180):k==j-1?(i=n[j-2].lng*Math.PI/180,o=n[j-2].lat*Math.PI/180,g=n[j-1].lng*Math.PI/180,h=n[j-1].lat*Math.PI/180,M=n[0].lng*Math.PI/180,f=n[0].lat*Math.PI/180):(i=n[k-1].lng*Math.PI/180,o=n[k-1].lat*Math.PI/180,g=n[k].lng*Math.PI/180,h=n[k].lat*Math.PI/180,M=n[k+1].lng*Math.PI/180,f=n[k+1].lat*Math.PI/180),s=Math.cos(h)*Math.cos(g),u=Math.cos(h)*Math.sin(g),P=Math.sin(h),c=Math.cos(o)*Math.cos(i),I=Math.cos(o)*Math.sin(i),L=Math.sin(o),v=Math.cos(f)*Math.cos(M),m=Math.cos(f)*Math.sin(M),p=Math.sin(f),y=(s*s+u*u+P*P)/(s*c+u*I+P*L),B=(s*s+u*u+P*P)/(s*v+u*m+P*p),G=y*c-s,d=y*I-u,S=y*L-P,x=B*v-s,R=B*m-u,T=B*p-P,C=(x*G+R*d+T*S)/(Math.sqrt(x*x+R*R+T*T)*Math.sqrt(G*G+d*d+S*S)),C<-1&&(C=-1),C>1&&(C=1),C=Math.acos(C),A=R*S-T*d,b=0-(x*S-T*G),D=x*d-R*G,q=0!=s?A/s:0!=u?b/u:D/P,q>0?(w+=C,O++):(E+=C,N++);return l=w+(2*Math.PI*N-E),r=2*Math.PI*O-w+E,U=w>E?l-(j-2)*Math.PI<1?l:r:r-(j-2)*Math.PI<1?r:l,e=(U-(j-2)*Math.PI)*W*W,e},l.isPolylineIntersectArea=function(t,n){var a=function(t,n,a,l){var r,e,i,o,g=t.lng,h=t.lat,M=n.lng,f=n.lat,s=a.lng,u=a.lat,P=l.lng,c=l.lat;return Math.min(g,M)<=Math.max(s,P)&&Math.min(u,c)<=Math.max(h,f)&&Math.min(s,P)<=Math.max(g,M)&&Math.min(h,f)<=Math.max(u,c)&&(r=(s-g)*(f-h)-(M-g)*(u-h),e=(P-g)*(f-h)-(M-g)*(c-h),i=(g-s)*(c-u)-(P-s)*(h-u),o=(M-s)*(c-u)-(P-s)*(f-u),r*e<=2e-10&&i*o<=2e-10)};if(!(t instanceof BMapGL.Polyline&&n instanceof BMapGL.Polygon))return console.error("参数出错,传入值非折线和多边形"),!1;if(t=t.getPath().map(function(t){return{lng:t.lng,lat:t.lat}}),n=n.getPath().map(function(t){return{lng:t.lng,lat:t.lat}}),t.length<1||n.length<=2)return console.error("参数出错,传入值非折线和多边形"),!1;for(var r=[],e=[],i=0;i<t.length;i++)if(l.isPointInPolygon(t[i],n))return!0;for(var o=1;o<t.length;o++)r.push([t[o-1],t[o]]);for(var g=1;g<n.length;g++)e.push([n[g-1],n[g]]);e.push([n[n.length-1],n[0]]);for(var h=0;h<r.length;h++)for(var M=0;M<e.length;M++)if(a(r[h][0],r[h][1],e[M][0],e[M][1]))return!0;return!1}})();